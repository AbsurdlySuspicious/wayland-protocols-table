{"compositors":[{"id":"mutter","name":"Mutter","icon":"gnome","supportedPercent":39},{"id":"kwin","name":"KWin","icon":"kde","supportedPercent":44},{"id":"sway","name":"Sway","icon":"sway","supportedPercent":52},{"id":"cosmic","name":"COSMIC","icon":"cosmic","supportedPercent":44},{"id":"hyprland","name":"Hyprland","icon":"hyprland","supportedPercent":56},{"id":"niri","name":"niri","supportedPercent":45},{"id":"weston","name":"Weston","icon":"weston","supportedPercent":17},{"id":"labwc","name":"Labwc","icon":"labwc","supportedPercent":51},{"id":"cage","name":"Cage","supportedPercent":25},{"id":"wayfire","name":"Wayfire","icon":"wayfire","supportedPercent":44},{"id":"gamescope","name":"GameScope","icon":"Steam_Deck","supportedPercent":11},{"id":"jay","name":"Jay","supportedPercent":57},{"id":"mir","name":"Mir","icon":"mir","supportedPercent":30},{"id":"treeland","name":"Treeland","icon":"deepin","supportedPercent":29},{"id":"louvre","name":"Louvre","icon":"louvre","supportedPercent":37}],"protocols":[{"id":"wayland","name":"Wayland","tags":{"source":"core","stability":"stable"},"source":"core","supportIf":{"wl_compositor":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"treeland":1,"louvre":1},"wl_data_device_manager":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1,"louvre":1},"wl_output":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"treeland":1,"louvre":1},"wl_seat":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"treeland":1,"louvre":1},"wl_shm":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"treeland":1,"louvre":1},"wl_subcompositor":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1,"louvre":1},"wl_fixes":{"jay":1},"wl_shell":{"mir":1}},"supportSum":{"mutter":"partial","kwin":"partial","sway":"partial","cosmic":"partial","hyprland":"partial","niri":"partial","weston":"partial","labwc":"partial","cage":"partial","wayfire":"partial","gamescope":"partial","jay":"partial","mir":"partial","treeland":"partial","louvre":"partial"},"defaultExpand":true,"deprecations":{"wl_shell":"Use xdg-shell","wl_shell_surface":"Use xdg-shell"}},{"id":"presentation-time","name":"Presentation time","tags":{"source":"wayland","stability":"stable"},"source":"wayland-protocols","supportIf":{"wp_presentation":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"gamescope":1,"jay":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","weston":"full","labwc":"full","cage":"full","wayfire":"full","gamescope":"full","jay":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"viewporter","name":"Viewporter","tags":{"source":"wayland","stability":"stable"},"source":"wayland-protocols","supportIf":{"wp_viewporter":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","weston":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-shell","name":"XDG shell","tags":{"source":"wayland","stability":"stable"},"source":"wayland-protocols","supportIf":{"xdg_wm_base":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","weston":"full","labwc":"full","cage":"full","wayfire":"full","gamescope":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"linux-dmabuf-v1","name":"Linux DMA-BUF","tags":{"source":"wayland","stability":"stable"},"source":"wayland-protocols","supportIf":{"zwp_linux_dmabuf_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","weston":"full","labwc":"full","cage":"full","wayfire":"full","gamescope":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"tablet-v2","name":"Tablet","desc":"Wayland protocol for graphics tablets","descFull":"This description provides a high-level overview of the interplay between\nthe interfaces defined this protocol. For details, see the protocol\nspecification.\n\nMore than one tablet may exist, and device-specifics matter. Tablets are\nnot represented by a single virtual device like wl_pointer. A client\nbinds to the tablet manager object which is just a proxy object. From\nthat, the client requests wp_tablet_manager.get_tablet_seat(wl_seat)\nand that returns the actual interface that has all the tablets. With\nthis indirection, we can avoid merging wp_tablet into the actual Wayland\nprotocol, a long-term benefit.\n\nThe wp_tablet_seat sends a \"tablet added\" event for each tablet\nconnected. That event is followed by descriptive events about the\nhardware; currently that includes events for name, vid/pid and\na wp_tablet.path event that describes a local path. This path can be\nused to uniquely identify a tablet or get more information through\nlibwacom. Emulated or nested tablets can skip any of those, e.g. a\nvirtual tablet may not have a vid/pid. The sequence of descriptive\nevents is terminated by a wp_tablet.done event to signal that a client\nmay now finalize any initialization for that tablet.\n\nEvents from tablets require a tool in proximity. Tools are also managed\nby the tablet seat; a \"tool added\" event is sent whenever a tool is new\nto the compositor. That event is followed by a number of descriptive\nevents about the hardware; currently that includes capabilities,\nhardware id and serial number, and tool type. Similar to the tablet\ninterface, a wp_tablet_tool.done event is sent to terminate that initial\nsequence.\n\nAny event from a tool happens on the wp_tablet_tool interface. When the\ntool gets into proximity of the tablet, a proximity_in event is sent on\nthe wp_tablet_tool interface, listing the tablet and the surface. That\nevent is followed by a motion event with the coordinates. After that,\nit's the usual motion, axis, button, etc. events. The protocol's\nserialisation means events are grouped by wp_tablet_tool.frame events.\n\nTwo special events (that don't exist in X) are down and up. They signal\n\"tip touching the surface\". For tablets without real proximity\ndetection, the sequence is: proximity_in, motion, down, frame.\n\nWhen the tool leaves proximity, a proximity_out event is sent. If any\nbutton is still down, a button release event is sent before this\nproximity event. These button events are sent in the same frame as the\nproximity event to signal to the client that the buttons were held when\nthe tool left proximity.\n\nIf the tool moves out of the surface but stays in proximity (i.e.\nbetween windows), compositor-specific grab policies apply. This usually\nmeans that the proximity-out is delayed until all buttons are released.\n\nMoving a tool physically from one tablet to the other has no real effect\non the protocol, since we already have the tool object from the \"tool\nadded\" event. All the information is already there and the proximity\nevents on both tablets are all a client needs to reconstruct what\nhappened.\n\nSome extra axes are normalized, i.e. the client knows the range as\nspecified in the protocol (e.g. [0, 65535]), the granularity however is\nunknown. The current normalized axes are pressure, distance, and slider.\n\nOther extra axes are in physical units as specified in the protocol.\nThe current extra axes with physical units are tilt, rotation and\nwheel rotation.\n\nSince tablets work independently of the pointer controlled by the mouse,\nthe focus handling is independent too and controlled by proximity.\nThe wp_tablet_tool.set_cursor request sets a tool-specific cursor.\nThis cursor surface may be the same as the mouse cursor, and it may be\nthe same across tools but it is possible to be more fine-grained. For\nexample, a client may set different cursors for the pen and eraser.\n\nTools are generally independent of tablets and it is\ncompositor-specific policy when a tool can be removed. Common approaches\nwill likely include some form of removing a tool when all tablets the\ntool was used on are removed.","tags":{"source":"wayland","stability":"stable"},"source":"wayland-protocols","supportIf":{"zwp_tablet_manager_v2":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"jay":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-activation-v1","name":"XDG activation","desc":"Protocol for requesting activation of surfaces","descFull":"The way for a client to pass focus to another toplevel is as follows.\n\nThe client that intends to activate another toplevel uses the\nxdg_activation_v1.get_activation_token request to get an activation token.\nThis token is then forwarded to the client, which is supposed to activate\none of its surfaces, through a separate band of communication.\n\nOne established way of doing this is through the XDG_ACTIVATION_TOKEN\nenvironment variable of a newly launched child process. The child process\nshould unset the environment variable again right after reading it out in\norder to avoid propagating it to other child processes.\n\nAnother established way exists for Applications implementing the D-Bus\ninterface org.freedesktop.Application, which should get their token under\nactivation-token on their platform_data.\n\nIn general activation tokens may be transferred across clients through\nmeans not described in this protocol.\n\nThe client to be activated will then pass the token\nit received to the xdg_activation_v1.activate request. The compositor can\nthen use this token to decide how to react to the activation request.\n\nThe token the activating client gets may be ineffective either already at\nthe time it receives it, for example if it was not focused, for focus\nstealing prevention. The activating client will have no way to discover\nthe validity of the token, and may still forward it to the to be activated\nclient.\n\nThe created activation token may optionally get information attached to it\nthat can be used by the compositor to identify the application that we\nintend to activate. This can for example be used to display a visual hint\nabout what application is being started.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"xdg_activation_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"jay":1,"mir":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","jay":"full","mir":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"drm-lease-v1","name":"DRM lease","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_drm_lease_device_v1":{"mutter":1,"kwin":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"jay":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","jay":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"linux-drm-syncobj-v1","name":"DRM synchronization object","desc":"protocol for providing explicit synchronization","descFull":"This protocol allows clients to request explicit synchronization for\nbuffers. It is tied to the Linux DRM synchronization object framework.\n\nSynchronization refers to co-ordination of pipelined operations performed\non buffers. Most GPU clients will schedule an asynchronous operation to\nrender to the buffer, then immediately send the buffer to the compositor\nto be attached to a surface.\n\nWith implicit synchronization, ensuring that the rendering operation is\ncomplete before the compositor displays the buffer is an implementation\ndetail handled by either the kernel or userspace graphics driver.\n\nBy contrast, with explicit synchronization, DRM synchronization object\ntimeline points mark when the asynchronous operations are complete. When\nsubmitting a buffer, the client provides a timeline point which will be\nwaited on before the compositor accesses the buffer, and another timeline\npoint that the compositor will signal when it no longer needs to access the\nbuffer contents for the purposes of the surface commit.\n\nLinux DRM synchronization objects are documented at:\nhttps://dri.freedesktop.org/docs/drm/gpu/drm-mm.html#drm-sync-objects\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_linux_drm_syncobj_manager_v1":{"mutter":1,"kwin":1,"hyprland":1,"gamescope":1,"jay":1}},"supportSum":{"mutter":"full","kwin":"full","hyprland":"full","gamescope":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"ext-session-lock-v1","name":"Session lock","desc":"secure session locking with arbitrary graphics","descFull":"This protocol allows for a privileged Wayland client to lock the session\nand display arbitrary graphics while the session is locked.\n\nThe compositor may choose to restrict this protocol to a special client\nlaunched by the compositor itself or expose it to all privileged clients,\nthis is compositor policy.\n\nThe client is responsible for performing authentication and informing the\ncompositor when the session should be unlocked. If the client dies while\nthe session is locked the session remains locked, possibly permanently\ndepending on compositor policy.\n\nThe key words \"must\", \"must not\", \"required\", \"shall\", \"shall not\",\n\"should\", \"should not\", \"recommended\",  \"may\", and \"optional\" in this\ndocument are to be interpreted as described in IETF RFC 2119.\n\nWarning! The protocol described in this file is currently in the\ntesting phase. Backward compatible changes may be added together with\nthe corresponding interface version bump. Backward incompatible changes\ncan only be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"ext_session_lock_manager_v1":{"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"jay":1,"mir":1,"louvre":1}},"supportSum":{"sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","jay":"full","mir":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"single-pixel-buffer-v1","name":"Single-pixel buffer","desc":"single pixel buffer factory","descFull":"This protocol extension allows clients to create single-pixel buffers.\n\nCompositors supporting this protocol extension should also support the\nviewporter protocol extension. Clients may use viewporter to scale a\nsingle-pixel buffer to a desired size.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_single_pixel_buffer_manager_v1":{"mutter":1,"sway":1,"cosmic":1,"hyprland":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"louvre":1}},"supportSum":{"mutter":"full","sway":"full","cosmic":"full","hyprland":"full","weston":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"content-type-v1","name":"Content type hint","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_content_type_manager_v1":{"kwin":1,"sway":1,"hyprland":1,"jay":1,"louvre":1}},"supportSum":{"kwin":"full","sway":"full","hyprland":"full","jay":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"ext-idle-notify-v1","name":"Idle notify","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"ext_idle_notifier_v1":{"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"treeland":1,"louvre":1}},"supportSum":{"kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"ext-image-capture-source-v1","name":"Image Capture Source","desc":"opaque image capture source objects","descFull":"This protocol serves as an intermediary between capturing protocols and\npotential image capture sources such as outputs and toplevels.\n\nThis protocol may be extended to support more image capture sources in the\nfuture, thereby adding those image capture sources to other protocols that\nuse the image capture source object without having to modify those\nprotocols.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"ext_foreign_toplevel_image_capture_source_manager_v1":{"jay":1,"louvre":1},"ext_output_image_capture_source_manager_v1":{"jay":1,"louvre":1}},"supportSum":{"jay":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"ext-image-copy-capture-v1","name":"Image Copy Capture","desc":"image capturing into client buffers","descFull":"This protocol allows clients to ask the compositor to capture image sources\nsuch as outputs and toplevels into user submitted buffers.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"ext_image_copy_capture_manager_v1":{"jay":1}},"supportSum":{"jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"tearing-control-v1","name":"Tearing control","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_tearing_control_manager_v1":{"kwin":1,"sway":1,"hyprland":1,"weston":1,"labwc":1,"jay":1,"louvre":1}},"supportSum":{"kwin":"full","sway":"full","hyprland":"full","weston":"full","labwc":"full","jay":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"xwayland-shell-v1","name":"Xwayland shell","desc":"Protocol for associating X11 windows to wl_surfaces","descFull":"This protocol adds a xwayland_surface role which allows an Xwayland\nserver to associate an X11 window to a wl_surface.\n\nBefore this protocol, this would be done via the Xwayland server\nproviding the wl_surface's resource id via the a client message with\nthe WL_SURFACE_ID atom on the X window.\nThis was problematic as a race could occur if the wl_surface\nassociated with a WL_SURFACE_ID for a window was destroyed before the\nclient message was processed by the compositor and another surface\n(or other object) had taken its id due to recycling.\n\nThis protocol solves the problem by moving the X11 window to wl_surface\nassociation step to the Wayland side, which means that the association\ncannot happen out-of-sync with the resource lifetime of the wl_surface.\n\nThis protocol avoids duplicating the race on the other side by adding a\nnon-zero monotonic serial number which is entirely unique that is set on\nboth the wl_surface (via. xwayland_surface_v1's set_serial method) and\nthe X11 window (via. the `WL_SURFACE_SERIAL` client message) that can be\nused to associate them, and synchronize the two timelines.\n\nThe key words \"must\", \"must not\", \"required\", \"shall\", \"shall not\",\n\"should\", \"should not\", \"recommended\",  \"may\", and \"optional\" in this\ndocument are to be interpreted as described in IETF RFC 2119.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"xwayland_shell_v1":{"hyprland":1,"cage":1,"wayfire":1}},"supportSum":{"hyprland":"full","cage":"full","wayfire":"full"},"defaultExpand":false,"deprecations":null},{"id":"fractional-scale-v1","name":"Fractional scale","desc":"Protocol for requesting fractional surface scales","descFull":"This protocol allows a compositor to suggest for surfaces to render at\nfractional scales.\n\nA client can submit scaled content by utilizing wp_viewport. This is done by\ncreating a wp_viewport object for the surface and setting the destination\nrectangle to the surface size before the scale factor is applied.\n\nThe buffer size is calculated by multiplying the surface size by the\nintended scale.\n\nThe wl_surface buffer scale should remain set to 1.\n\nIf a surface has a surface-local size of 100 px by 50 px and wishes to\nsubmit buffers with a scale of 1.5, then a buffer of 150px by 75 px should\nbe used and the wp_viewport destination rectangle should be 100 px by 50 px.\n\nFor toplevel surfaces, the size is rounded halfway away from zero. The\nrounding algorithm for subsurface position and size is not defined.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_fractional_scale_manager_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"cursor-shape-v1","name":"Cursor shape","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_cursor_shape_manager_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"jay":1,"treeland":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","jay":"full","treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"ext-foreign-toplevel-list-v1","name":"Foreign toplevel list","desc":"list toplevels","descFull":"The purpose of this protocol is to provide protocol object handles for\ntoplevels, possibly originating from another client.\n\nThis protocol is intentionally minimalistic and expects additional\nfunctionality (e.g. creating a screencopy source from a toplevel handle,\ngetting information about the state of the toplevel) to be implemented\nin extension protocols.\n\nThe compositor may choose to restrict this protocol to a special client\nlaunched by the compositor itself or expose it to all clients,\nthis is compositor policy.\n\nThe key words \"must\", \"must not\", \"required\", \"shall\", \"shall not\",\n\"should\", \"should not\", \"recommended\",  \"may\", and \"optional\" in this\ndocument are to be interpreted as described in IETF RFC 2119.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"ext_foreign_toplevel_list_v1":{"sway":1,"cosmic":1,"hyprland":1,"labwc":1,"jay":1,"louvre":1}},"supportSum":{"sway":"full","cosmic":"full","hyprland":"full","labwc":"full","jay":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"security-context-v1","name":"Security context","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_security_context_manager_v1":{"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"jay":1}},"supportSum":{"kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"ext-transient-seat-v1","name":"Transient seat","desc":"protocol for creating temporary seats","descFull":"The transient seat protocol can be used by privileged clients to create\nindependent seats that will be removed from the compositor when the client\ndestroys its transient seat.\n\nThis protocol is intended for use with virtual input protocols such as\n\"virtual_keyboard_unstable_v1\" or \"wlr_virtual_pointer_unstable_v1\", both\nof which allow the user to select a seat.\n\nThe \"wl_seat\" global created by this protocol does not generate input events\non its own, or have any capabilities except those assigned to it by other\nprotocol extensions, such as the ones mentioned above.\n\nFor example, a remote desktop server can create a seat with virtual inputs\nfor each remote user by following these steps for each new connection:\n* Create a transient seat\n* Wait for the transient seat to be created\n* Locate a \"wl_seat\" global with a matching name\n* Create virtual inputs using the resulting \"wl_seat\" global","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"ext_transient_seat_manager_v1":{"sway":1,"jay":1}},"supportSum":{"sway":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-toplevel-drag-v1","name":"XDG toplevel drag","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"xdg_toplevel_drag_manager_v1":{"mutter":1,"kwin":1,"jay":1}},"supportSum":{"mutter":"full","kwin":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-toplevel-icon-v1","name":"XDG toplevel icon","desc":"protocol to assign icons to toplevels","descFull":"This protocol allows clients to set icons for their toplevel surfaces\neither via the XDG icon stock (using an icon name), or from pixel data.\n\nA toplevel icon represents the individual toplevel (unlike the application\nor launcher icon, which represents the application as a whole), and may be\nshown in window switchers, window overviews and taskbars that list\nindividual windows.\n\nThis document adheres to RFC 2119 when using words like \"must\",\n\"should\", \"may\", etc.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"xdg_toplevel_icon_manager_v1":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-dialog-v1","name":"XDG dialog windows","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"xdg_wm_dialog_v1":{"mutter":1,"kwin":1,"hyprland":1,"jay":1}},"supportSum":{"mutter":"full","kwin":"full","hyprland":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"alpha-modifier-v1","name":"Alpha modifier protocol","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_alpha_modifier_v1":{"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"jay":1}},"supportSum":{"kwin":"full","sway":"full","cosmic":"full","hyprland":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"commit-timing-v1","name":"Commit timing protocol","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_commit_timing_manager_v1":{"mutter":1,"jay":1}},"supportSum":{"mutter":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"ext-data-control-v1","name":"Data control protocol","desc":"control data devices","descFull":"This protocol allows a privileged client to control data devices. In\nparticular, the client will be able to manage the current selection and take\nthe role of a clipboard manager.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"ext_data_control_manager_v1":{"niri":1,"jay":1}},"supportSum":{"niri":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"fifo-v1","name":"Fifo protocol","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_fifo_manager_v1":{"mutter":1,"jay":1}},"supportSum":{"mutter":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-system-bell-v1","name":"System bell protocol","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"xdg_system_bell_v1":{"mutter":1,"kwin":1}},"supportSum":{"mutter":"full","kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"ext-workspace-v1","name":"Workspace protocol","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"ext_workspace_manager_v1":{"labwc":1,"jay":1}},"supportSum":{"labwc":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"color-management-v1","name":"Color management","desc":"color management protocol","descFull":"The aim of the color management extension is to allow clients to know\nthe color properties of outputs, and to tell the compositor about the color\nproperties of their content on surfaces. Doing this enables a compositor\nto perform automatic color management of content for different outputs\naccording to how content is intended to look like.\n\nThe color properties are represented as an image description object which\nis immutable after it has been created. A wl_output always has an\nassociated image description that clients can observe. A wl_surface\nalways has an associated preferred image description as a hint chosen by\nthe compositor that clients can also observe. Clients can set an image\ndescription on a wl_surface to denote the color characteristics of the\nsurface contents.\n\nAn image description includes SDR and HDR colorimetry and encoding, HDR\nmetadata, and viewing environment parameters. An image description does\nnot include the properties set through color-representation extension.\nIt is expected that the color-representation extension is used in\nconjunction with the color management extension when necessary,\nparticularly with the YUV family of pixel formats.\n\nRecommendation ITU-T H.273\n\"Coding-independent code points for video signal type identification\"\nshall be referred to as simply H.273 here.\n\nThe color-and-hdr repository\n(https://gitlab.freedesktop.org/pq/color-and-hdr) contains\nbackground information on the protocol design and legacy color management.\nIt also contains a glossary, learning resources for digital color, tools,\nsamples and more.\n\nThe terminology used in this protocol is based on common color science and\ncolor encoding terminology where possible. The glossary in the color-and-hdr\nrepository shall be the authority on the definition of terms in this\nprotocol.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{"wp_color_manager_v1":{"mutter":1,"hyprland":1,"jay":1}},"supportSum":{"mutter":"full","hyprland":"full","jay":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-toplevel-tag-v1","name":"XDG toplevel tag","tags":{"source":"wayland","stability":"staging"},"source":"wayland-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"fullscreen-shell-unstable-v1","name":"Fullscreen shell","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"idle-inhibit-unstable-v1","name":"Idle inhibit","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_idle_inhibit_manager_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"input-method-unstable-v1","name":"Input method v1","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_input_method_v1":{"weston":1,"mir":1},"zwp_input_panel_v1":{"weston":1,"mir":1}},"supportSum":{"weston":"full","mir":"full"},"defaultExpand":false,"deprecations":null},{"id":"input-timestamps-unstable-v1","name":"Input timestamps","desc":"High-resolution timestamps for input events","descFull":"This protocol specifies a way for a client to request and receive\nhigh-resolution timestamps for input events.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_input_timestamps_manager_v1":{"weston":1}},"supportSum":{"weston":"full"},"defaultExpand":false,"deprecations":null},{"id":"keyboard-shortcuts-inhibit-unstable-v1","name":"Keyboard shortcuts inhibit","desc":"Protocol for inhibiting the compositor keyboard shortcuts","descFull":"This protocol specifies a way for a client to request the compositor\nto ignore its own keyboard shortcuts for a given seat, so that all\nkey events from that seat get forwarded to a surface.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible\nchanges may be added together with the corresponding interface\nversion bump.\nBackward incompatible changes are done by bumping the version\nnumber in the protocol and interface names and resetting the\ninterface version. Once the protocol is to be declared stable,\nthe 'z' prefix and the version number in the protocol and\ninterface names are removed and the interface version number is\nreset.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_keyboard_shortcuts_inhibit_manager_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"wayfire":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","wayfire":"full"},"defaultExpand":false,"deprecations":null},{"id":"linux-explicit-synchronization-unstable-v1","name":"Linux explicit synchronization (dma-fence)","tags":{"source":"wayland","stability":"unstable","deprecated":"deprecated"},"source":"wayland-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":{"zwp_linux_explicit_synchronization_v1":"Superseded by linux-drm-syncobj","zwp_linux_surface_synchronization_v1":"Superseded by linux-drm-syncobj","zwp_linux_buffer_release_v1":"Superseded by linux-drm-syncobj"},"deprecatedFull":true},{"id":"pointer-constraints-unstable-v1","name":"Pointer constraints","desc":"protocol for constraining pointer motions","descFull":"This protocol specifies a set of interfaces used for adding constraints to\nthe motion of a pointer. Possible constraints include confining pointer\nmotions to a given region, or locking it to its current position.\n\nIn order to constrain the pointer, a client must first bind the global\ninterface \"wp_pointer_constraints\" which, if a compositor supports pointer\nconstraints, is exposed by the registry. Using the bound global object, the\nclient uses the request that corresponds to the type of constraint it wants\nto make. See wp_pointer_constraints for more details.\n\nWarning! The protocol described in this file is experimental and backward\nincompatible changes may be made. Backward compatible changes may be added\ntogether with the corresponding interface version bump. Backward\nincompatible changes are done by bumping the version number in the protocol\nand interface names and resetting the interface version. Once the protocol\nis to be declared stable, the 'z' prefix and the version number in the\nprotocol and interface names are removed and the interface version number is\nreset.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_pointer_constraints_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","weston":"full","labwc":"full","wayfire":"full","gamescope":"full","jay":"full","mir":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"pointer-gestures-unstable-v1","name":"Pointer gestures","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_pointer_gestures_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"jay":1,"treeland":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","jay":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"primary-selection-unstable-v1","name":"Primary selection","desc":"Primary selection protocol","descFull":"This protocol provides the ability to have a primary selection device to\nmatch that of the X server. This primary selection is a shortcut to the\ncommon clipboard selection, where text just needs to be selected in order\nto allow copying it elsewhere. The de facto way to perform this action\nis the middle mouse button, although it is not limited to this one.\n\nClients wishing to honor primary selection should create a primary\nselection source and set it as the selection through\nwp_primary_selection_device.set_selection whenever the text selection\nchanges. In order to minimize calls in pointer-driven text selection,\nit should happen only once after the operation finished. Similarly,\na NULL source should be set when text is unselected.\n\nwp_primary_selection_offer objects are first announced through the\nwp_primary_selection_device.data_offer event. Immediately after this event,\nthe primary data offer will emit wp_primary_selection_offer.offer events\nto let know of the mime types being offered.\n\nWhen the primary selection changes, the client with the keyboard focus\nwill receive wp_primary_selection_device.selection events. Only the client\nwith the keyboard focus will receive such events with a non-NULL\nwp_primary_selection_offer. Across keyboard focus changes, previously\nfocused clients will receive wp_primary_selection_device.events with a\nNULL wp_primary_selection_offer.\n\nIn order to request the primary selection data, the client must pass\na recent serial pertaining to the press event that is triggering the\noperation, if the compositor deems the serial valid and recent, the\nwp_primary_selection_source.send event will happen in the other end\nto let the transfer begin. The client owning the primary selection\nshould write the requested data, and close the file descriptor\nimmediately.\n\nIf the primary selection owner client disappeared during the transfer,\nthe client reading the data will receive a\nwp_primary_selection_device.selection event with a NULL\nwp_primary_selection_offer, the client should take this as a hint\nto finish the reads related to the no longer existing offer.\n\nThe primary selection owner should be checking for errors during\nwrites, merely cancelling the ongoing transfer if any happened.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_primary_selection_device_manager_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","mir":"full","treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"relative-pointer-unstable-v1","name":"Relative pointer","desc":"protocol for relative pointer motion events","descFull":"This protocol specifies a set of interfaces used for making clients able to\nreceive relative pointer events not obstructed by barriers (such as the\nmonitor edge or other pointer barriers).\n\nTo start receiving relative pointer events, a client must first bind the\nglobal interface \"wp_relative_pointer_manager\" which, if a compositor\nsupports relative pointer motion events, is exposed by the registry. After\nhaving created the relative pointer manager proxy object, the client uses\nit to create the actual relative pointer object using the\n\"get_relative_pointer\" request given a wl_pointer. The relative pointer\nmotion events will then, when applicable, be transmitted via the proxy of\nthe newly created relative pointer object. See the documentation of the\nrelative pointer interface for more details.\n\nWarning! The protocol described in this file is experimental and backward\nincompatible changes may be made. Backward compatible changes may be added\ntogether with the corresponding interface version bump. Backward\nincompatible changes are done by bumping the version number in the protocol\nand interface names and resetting the interface version. Once the protocol\nis to be declared stable, the 'z' prefix and the version number in the\nprotocol and interface names are removed and the interface version number is\nreset.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_relative_pointer_manager_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","weston":"full","labwc":"full","cage":"full","wayfire":"full","gamescope":"full","jay":"full","mir":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"text-input-unstable-v3","name":"Text input","desc":"Protocol for composing text","descFull":"This protocol allows compositors to act as input methods and to send text\nto applications. A text input object is used to manage state of what are\ntypically text entry fields in the application.\n\nThis document adheres to the RFC 2119 when using words like \"must\",\n\"should\", \"may\", etc.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zwp_text_input_manager_v3":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"jay":1,"mir":1,"treeland":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","jay":"full","mir":"full","treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-decoration-unstable-v1","name":"XDG decoration","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zxdg_decoration_manager_v1":{"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-foreign-unstable-v2","name":"XDG foreign","desc":"Protocol for exporting xdg surface handles","descFull":"This protocol specifies a way for making it possible to reference a surface\nof a different client. With such a reference, a client can, by using the\ninterfaces provided by this protocol, manipulate the relationship between\nits own surfaces and the surface of some other client. For example, stack\nsome of its own surface above the other clients surface.\n\nIn order for a client A to get a reference of a surface of client B, client\nB must first export its surface using xdg_exporter.export_toplevel. Upon\ndoing this, client B will receive a handle (a unique string) that it may\nshare with client A in some way (for example D-Bus). After client A has\nreceived the handle from client B, it may use xdg_importer.import_toplevel\nto create a reference to the surface client B just exported. See the\ncorresponding requests for details.\n\nA possible use case for this is out-of-process dialogs. For example when a\nsandboxed client without file system access needs the user to select a file\non the file system, given sandbox environment support, it can export its\nsurface, passing the exported surface handle to an unsandboxed process that\ncan show a file browser dialog and stack it above the sandboxed client's\nsurface.\n\nWarning! The protocol described in this file is experimental and backward\nincompatible changes may be made. Backward compatible changes may be added\ntogether with the corresponding interface version bump. Backward\nincompatible changes are done by bumping the version number in the protocol\nand interface names and resetting the interface version. Once the protocol\nis to be declared stable, the 'z' prefix and the version number in the\nprotocol and interface names are removed and the interface version number is\nreset.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zxdg_exporter_v2":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"niri":1,"labwc":1,"wayfire":1},"zxdg_importer_v2":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"niri":1,"labwc":1,"wayfire":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","niri":"full","labwc":"full","wayfire":"full"},"defaultExpand":false,"deprecations":null},{"id":"xdg-output-unstable-v1","name":"XDG output","desc":"Protocol to describe output regions","descFull":"This protocol aims at describing outputs in a way which is more in line\nwith the concept of an output on desktop oriented systems.\n\nSome information are more specific to the concept of an output for\na desktop oriented system and may not make sense in other applications,\nsuch as IVI systems for example.\n\nTypically, the global compositor space on a desktop system is made of\na contiguous or overlapping set of rectangular regions.\n\nThe logical_position and logical_size events defined in this protocol\nmight provide information identical to their counterparts already\navailable from wl_output, in which case the information provided by this\nprotocol should be preferred to their equivalent in wl_output. The goal is\nto move the desktop specific concepts (such as output location within the\nglobal compositor space, etc.) out of the core wl_output protocol.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible\nchanges may be added together with the corresponding interface\nversion bump.\nBackward incompatible changes are done by bumping the version\nnumber in the protocol and interface names and resetting the\ninterface version. Once the protocol is to be declared stable,\nthe 'z' prefix and the version number in the protocol and\ninterface names are removed and the interface version number is\nreset.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{"zxdg_output_manager_v1":{"mutter":1,"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","weston":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"xwayland-keyboard-grab-unstable-v1","name":"XWayland keyboard grabbing","desc":"Protocol for grabbing the keyboard from Xwayland","descFull":"This protocol is application-specific to meet the needs of the X11\nprotocol through Xwayland. It provides a way for Xwayland to request\nall keyboard events to be forwarded to a surface even when the\nsurface does not have keyboard focus.\n\nIn the X11 protocol, a client may request an \"active grab\" on the\nkeyboard. On success, all key events are reported only to the\ngrabbing X11 client. For details, see XGrabKeyboard(3).\n\nThe core Wayland protocol does not have a notion of an active\nkeyboard grab. When running in Xwayland, X11 applications may\nacquire an active grab inside Xwayland but that cannot be translated\nto the Wayland compositor who may set the input focus to some other\nsurface. In doing so, it breaks the X11 client assumption that all\nkey events are reported to the grabbing client.\n\nThis protocol specifies a way for Xwayland to request all keyboard\nbe directed to the given surface. The protocol does not guarantee\nthat the compositor will honor this request and it does not\nprescribe user interfaces on how to handle the respond. For example,\na compositor may inform the user that all key events are now\nforwarded to the given client surface, or it may ask the user for\npermission to do so.\n\nCompositors are required to restrict access to this application\nspecific protocol to Xwayland alone.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible\nchanges may be added together with the corresponding interface\nversion bump.\nBackward incompatible changes are done by bumping the version\nnumber in the protocol and interface names and resetting the\ninterface version. Once the protocol is to be declared stable,\nthe 'z' prefix and the version number in the protocol and\ninterface names are removed and the interface version number is\nreset.","tags":{"source":"wayland","stability":"unstable"},"source":"wayland-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"wlr-data-control-unstable-v1","name":"wlr data control","desc":"control data devices","descFull":"This protocol allows a privileged client to control data devices. In\nparticular, the client will be able to manage the current selection and take\nthe role of a clipboard manager.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_data_control_manager_v1":{"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"jay":1,"treeland":1}},"supportSum":{"kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","jay":"full","treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"wlr-export-dmabuf-unstable-v1","name":"wlr export DMA-BUF","desc":"a protocol for low overhead screen content capturing","descFull":"An interface to capture surfaces in an efficient way by exporting DMA-BUFs.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_export_dmabuf_manager_v1":{"sway":1,"labwc":1,"cage":1,"wayfire":1}},"supportSum":{"sway":"full","labwc":"full","cage":"full","wayfire":"full"},"defaultExpand":false,"deprecations":null},{"id":"wlr-foreign-toplevel-management-unstable-v1","name":"wlr foreign toplevel management","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_foreign_toplevel_manager_v1":{"sway":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"sway":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"wlr-gamma-control-unstable-v1","name":"wlr gamma control","desc":"manage gamma tables of outputs","descFull":"This protocol allows a privileged client to set the gamma tables for\noutputs.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_gamma_control_manager_v1":{"sway":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"treeland":1,"louvre":1}},"supportSum":{"sway":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"wlr-input-inhibitor-unstable-v1","name":"wlr input inhibitor","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"wlr-layer-shell-unstable-v1","name":"wlr layer shell","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_layer_shell_v1":{"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"wayfire":1,"gamescope":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","wayfire":"full","gamescope":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"wlr-output-management-unstable-v1","name":"wlr output management","desc":"protocol to configure output devices","descFull":"This protocol exposes interfaces to obtain and modify output device\nconfiguration.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_output_manager_v1":{"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"treeland":1,"louvre":1}},"supportSum":{"sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"wlr-output-power-management-unstable-v1","name":"wlr output power management","desc":"Control power management modes of outputs","descFull":"This protocol allows clients to control power management modes\nof outputs that are currently part of the compositor space. The\nintent is to allow special clients like desktop shells to power\ndown outputs when the system is idle.\n\nTo modify outputs not currently part of the compositor space see\nwlr-output-management.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_output_power_manager_v1":{"sway":1,"cosmic":1,"hyprland":1,"labwc":1,"wayfire":1,"treeland":1}},"supportSum":{"sway":"full","cosmic":"full","hyprland":"full","labwc":"full","wayfire":"full","treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"wlr-screencopy-unstable-v1","name":"wlr screencopy","desc":"screen content capturing on client buffers","descFull":"This protocol allows clients to ask the compositor to copy part of the\nscreen content to a client buffer.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_screencopy_manager_v1":{"sway":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1,"louvre":1}},"supportSum":{"sway":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","mir":"full","treeland":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"wlr-virtual-pointer-unstable-v1","name":"wlr virtual pointer","tags":{"source":"wlr","stability":"unstable"},"source":"wlr-protocols","supportIf":{"zwlr_virtual_pointer_manager_v1":{"sway":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"mir":1}},"supportSum":{"sway":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","mir":"full"},"defaultExpand":false,"deprecations":null},{"id":"input-method-unstable-v2","name":"Input method v2","desc":"Protocol for creating input methods","descFull":"This protocol allows applications to act as input methods for compositors.\n\nAn input method context is used to manage the state of the input method.\n\nText strings are UTF-8 encoded, their indices and lengths are in bytes.\n\nThis document adheres to the RFC 2119 when using words like \"must\",\n\"should\", \"may\", etc.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{"zwp_input_method_manager_v2":{"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"jay":1,"mir":1,"treeland":1}},"supportSum":{"sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","jay":"full","mir":"full","treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-appmenu","name":"KDE AppMenu","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_kwin_appmenu_manager":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-blur","name":"KDE blur","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_kwin_blur_manager":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-contrast","name":"KDE contrast","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_kwin_contrast_manager":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-dpms","name":"KDE DPMS","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_kwin_dpms_manager":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-external-brightness-v1","name":"KDE external brightness","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"kde_external_brightness_v1":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-fake-input","name":"KDE fake input","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"kde-idle","name":"KDE idle","tags":{"source":"kde","stability":"unstable","deprecated":"deprecated"},"source":"kde-protocols","supportIf":{"org_kde_kwin_idle":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":{"org_kde_kwin_idle":"Use ext-idle-notify","org_kde_kwin_idle_timeout":"Use ext-idle-notify"},"deprecatedFull":true},{"id":"kde-keystate","name":"KDE key state","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"kde-lockscreen-overlay-v1","name":"KDE lockscreen overlay","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"kde-output-management","name":"KDE output management","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"kde-output-management-v2","name":"KDE output management v2","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"kde_output_management_v2":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-outputdevice","name":"KDE output device","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"kde-output-device-v2","name":"KDE output device v2","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"kde_output_device_v2":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-output-order-v1","name":"KDE output order","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"kde_output_order_v1":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-plasma-shell","name":"KDE plasma shell","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_plasma_shell":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-plasma-virtual-desktop","name":"KDE plasma virtual desktop","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_plasma_virtual_desktop_management":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-plasma-window-management","name":"KDE plasma window management","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"kde-primary-output-v1","name":"KDE primary output","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"kde-screen-edge-v1","name":"KDE screen edge","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"kde_screen_edge_manager_v1":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-zkde-screencast-unstable-v1","name":"KDE screencast","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"kde-server-decoration","name":"KDE server decoration","tags":{"source":"kde","stability":"unstable","deprecated":"deprecated"},"source":"kde-protocols","supportIf":{"org_kde_kwin_server_decoration_manager":{"kwin":1,"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"jay":1}},"supportSum":{"kwin":"full","sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full"},"defaultExpand":false,"deprecations":{"org_kde_kwin_server_decoration_manager":"Use xdg-decoration","org_kde_kwin_server_decoration":"Use xdg-decoration"},"deprecatedFull":true},{"id":"kde-server-decoration-palette","name":"KDE server decoration palette","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_kwin_server_decoration_palette_manager":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-shadow","name":"KDE shadow","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_kwin_shadow_manager":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"kde-slide","name":"KDE slide","tags":{"source":"kde","stability":"unstable"},"source":"kde-protocols","supportIf":{"org_kde_kwin_slide_manager":{"kwin":1}},"supportSum":{"kwin":"full"},"defaultExpand":false,"deprecations":null},{"id":"hyprland-ctm-control-v1","name":"Hyprland color transform matrix control","desc":"controlling outputs' color transform matrix","descFull":"This protocol allows a client to control outputs' color transform matrix (CTM).\n\nThis protocol is privileged and should not be exposed to unprivileged clients.","tags":{"source":"hyprland","stability":"unstable"},"source":"hyprland-protocols","supportIf":{"hyprland_ctm_control_manager_v1":{"hyprland":1}},"supportSum":{"hyprland":"full"},"defaultExpand":false,"deprecations":null},{"id":"hyprland-focus-grab-v1","name":"Hyprland focus grab","desc":"limit input focus to a set of surfaces","descFull":"This protocol allows clients to limit input focus to a specific set\nof surfaces and receive a notification when the limiter is removed as\ndetailed below.","tags":{"source":"hyprland","stability":"unstable"},"source":"hyprland-protocols","supportIf":{"hyprland_focus_grab_manager_v1":{"hyprland":1}},"supportSum":{"hyprland":"full"},"defaultExpand":false,"deprecations":null},{"id":"hyprland-global-shortcuts-v1","name":"Hyprland global shortcuts","desc":"registering global shortcuts","descFull":"This protocol allows a client to register triggerable actions,\nmeant to be global shortcuts.","tags":{"source":"hyprland","stability":"unstable"},"source":"hyprland-protocols","supportIf":{"hyprland_global_shortcuts_manager_v1":{"hyprland":1}},"supportSum":{"hyprland":"full"},"defaultExpand":false,"deprecations":null},{"id":"hyprland-surface-v1","name":"Hyprland surface","desc":"hyprland-specific wl_surface extensions","descFull":"This protocol exposes hyprland-specific wl_surface properties.","tags":{"source":"hyprland","stability":"unstable"},"source":"hyprland-protocols","supportIf":{"hyprland_surface_manager_v1":{"hyprland":1}},"supportSum":{"hyprland":"full"},"defaultExpand":false,"deprecations":null},{"id":"hyprland-toplevel-export-v1","name":"Hyprland toplevel export","desc":"capturing the contents of toplevel windows","descFull":"This protocol allows clients to ask for exporting another toplevel's\nsurface(s) to a buffer.\n\nParticularly useful for sharing a single window.","tags":{"source":"hyprland","stability":"unstable"},"source":"hyprland-protocols","supportIf":{"hyprland_toplevel_export_manager_v1":{"hyprland":1}},"supportSum":{"hyprland":"full"},"defaultExpand":false,"deprecations":null},{"id":"hyprland-lock-notify-v1","name":"Hyprland lock notify","tags":{"source":"hyprland","stability":"unstable"},"source":"hyprland-protocols","supportIf":{"hyprland_lock_notifier_v1":{"hyprland":1}},"supportSum":{"hyprland":"full"},"defaultExpand":false,"deprecations":null},{"id":"hyprland-toplevel-mapping-v1","name":"Hyprland toplevel mapping","desc":"mapping of toplevels to windows","descFull":"This protocol allows clients to retrieve the mapping of toplevels to hyprland window addresses.","tags":{"source":"hyprland","stability":"unstable"},"source":"hyprland-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"cosmic-image-source-unstable-v1","name":"COSMIC image source","desc":"opaque image source objects","descFull":"This protocol serves as an intermediary between screen capturing protocols\nand potential image sources such as outputs and toplevels.\n\nThis protocol may be extended to support more image sources in the future,\nthereby adding those image sources to other protocols that use the image\nsource object without having to modify those protocols.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"cosmic","stability":"unstable"},"source":"cosmic-protocols","supportIf":{"zcosmic_output_image_source_manager_v1":{"cosmic":1},"zcosmic_toplevel_image_source_manager_v1":{"cosmic":1},"zcosmic_workspace_image_source_manager_v1":{"cosmic":1}},"supportSum":{"cosmic":"full"},"defaultExpand":false,"deprecations":null},{"id":"cosmic-output-management-unstable-v1","name":"COSMIC output managment","desc":"extension protocol to wlr-output-management","descFull":"This protocol serves as an extension to wlr-output-management.\n\nIt primarily adds explicit output mirroring,\nwhile upstream is figuring out how to best support that.\n\nIt was designed against version 4 of wlr-output-management, but tries\nit's best to be forward compatible.","tags":{"source":"cosmic","stability":"unstable"},"source":"cosmic-protocols","supportIf":{"zcosmic_output_manager_v1":{"cosmic":1}},"supportSum":{"cosmic":"full"},"defaultExpand":false,"deprecations":null},{"id":"cosmic-screencopy-unstable-v1","name":"COSMIC screencopy v1","desc":"screen content capturing on client buffers","descFull":"This protocol allows clients to ask the compositor to copy part of the\nscreen content to a client buffer.\n\nWarning! The protocol described in this file is experimental and\nbackward incompatible changes may be made. Backward compatible changes\nmay be added together with the corresponding interface version bump.\nBackward incompatible changes are done by bumping the version number in\nthe protocol and interface names and resetting the interface version.\nOnce the protocol is to be declared stable, the 'z' prefix and the\nversion number in the protocol and interface names are removed and the\ninterface version number is reset.","tags":{"source":"cosmic","stability":"unstable"},"source":"cosmic-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"cosmic-screencopy-unstable-v2","name":"COSMIC screencopy v2","desc":"screen content capturing on client buffers","descFull":"This protocol allows clients to ask the compositor to capture screen\ncontents to user submitted buffers.\n\nWarning! The protocol described in this file is currently in the testing\nphase. Backward compatible changes may be added together with the\ncorresponding interface version bump. Backward incompatible changes can\nonly be done by creating a new major version of the extension.","tags":{"source":"cosmic","stability":"unstable"},"source":"cosmic-protocols","supportIf":{"zcosmic_screencopy_manager_v2":{"cosmic":1}},"supportSum":{"cosmic":"full"},"defaultExpand":false,"deprecations":null},{"id":"cosmic-toplevel-info-unstable-v1","name":"COSMIC toplevel info","tags":{"source":"cosmic","stability":"unstable"},"source":"cosmic-protocols","supportIf":{"zcosmic_toplevel_info_v1":{"cosmic":1}},"supportSum":{"cosmic":"full"},"defaultExpand":false,"deprecations":null},{"id":"cosmic-toplevel-management-unstable-v1","name":"COSMIC toplevel management","tags":{"source":"cosmic","stability":"unstable"},"source":"cosmic-protocols","supportIf":{"zcosmic_toplevel_manager_v1":{"cosmic":1}},"supportSum":{"cosmic":"full"},"defaultExpand":false,"deprecations":null},{"id":"cosmic-workspace-unstable-v1","name":"COSMIC workspace","tags":{"source":"cosmic","stability":"unstable"},"source":"cosmic-protocols","supportIf":{"zcosmic_workspace_manager_v1":{"cosmic":1,"labwc":1}},"supportSum":{"cosmic":"full","labwc":"full"},"defaultExpand":false,"deprecations":null},{"id":"ivi-application","name":"In-vehicle infotainment application","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"ivi-hmi-controller","name":"In-vehicle infotainment HMI controller","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"text-cursor-position","name":"Text cursor position","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"weston-content-protection","name":"Weston content protection","desc":"Protocol for providing secure output","descFull":"This protocol specifies a set of interfaces used to provide\ncontent-protection for e.g. HDCP, and protect surface contents on the\nsecured outputs and prevent from appearing in screenshots or from being\nvisible on non-secure outputs.\n\nA secure-output is defined as an output that is secured by some\ncontent-protection mechanism e.g. HDCP, and meets at least the minimum\nrequired content-protection level requested by a client.\n\nThe term content-protection is defined in terms of HDCP type 0 and\nHDCP type 1, but this may be extended in future.\n\nThis protocol is not intended for implementing Digital Rights Management on\ngeneral (e.g. Desktop) systems, and would only be useful for closed systems.\nAs the server is the one responsible for implementing\nthe content-protection, the client can only trust the content-protection as\nmuch they can trust the server.\n\nIn order to protect the content and prevent surface contents from appearing\nin screenshots or from being visible on non-secure outputs, a client must\nfirst bind the global interface \"weston_content_protection\" which, if a\ncompositor supports secure output, is exposed by the registry.\nUsing the bound global object, the client uses the \"get_protection\" request\nto instantiate an interface extension for a wl_surface object.\nThis extended interface will then allow surfaces to request for\ncontent-protection, and also to censor the visibility of the surface on\nnon-secure outputs. Client applications should not wait for the protection\nto change, as it might never change in case the content-protection cannot be\nachieved. Alternatively, clients can use a timeout and start showing the\ncontent in lower quality.\n\nCensored visibility is defined as the compositor censoring the protected\ncontent on non-secure outputs. Censoring may include artificially reducing\nimage quality or replacing the protected content completely with\nplaceholder graphics.\n\nCensored visibility is controlled by protection mode, set by the client.\nIn \"relax\" mode, the compositor may show protected content on non-secure\noutputs. It will be up to the client to adapt to secure and non-secure\npresentation. In \"enforce\" mode, the compositor will censor the parts of\nprotected content that would otherwise show on non-secure outputs.","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"weston-debug","name":"Weston debug","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"weston-desktop-shell","name":"Weston desktop shell","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{"weston_desktop_shell":{"weston":1}},"supportSum":{"weston":"full"},"defaultExpand":false,"deprecations":null},{"id":"weston-direct-display","name":"Weston direct display","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"weston-output-capture","name":"Weston output capture","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{"weston_capture_v1":{"weston":1}},"supportSum":{"weston":"full"},"defaultExpand":false,"deprecations":null},{"id":"weston-test","name":"Weston test","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"weston-touch-calibration","name":"Weston touch calibration","tags":{"source":"weston","stability":"unstable"},"source":"weston-protocols","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"treeland-capture-unstable-v1","name":"Treeland capture","desc":"protocol for capturing output contents or window contents","descFull":"This protocol allows authorized application to capture output contents or window\ncontents(useful for window streaming).","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_capture_manager_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"treeland-dde-shell-v1","name":"Treeland DDE shell","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_dde_shell_manager_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"treeland-foreign-toplevel-manager-v1","name":"Treeland foreign toplevel manager","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_foreign_toplevel_manager_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"treeland-output-manager-v1","name":"Treeland output manager","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_output_manager_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"treeland-personalization-manager-v1","name":"Treeland personalization manager","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_personalization_manager_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"treeland-shortcut-manager-v1","name":"Treeland shortcut manager","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_shortcut_manager_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"treeland-virtual-output-manager-v1","name":"Treeland virtual output manager","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_virtual_output_manager_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"treeland-wallpaper-color-v1","name":"Treeland wallpaper color","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_wallpaper_color_manager_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"treeland-window-management-v1","name":"Treeland window managment","tags":{"source":"treeland","stability":"unstable"},"source":"treeland-protocols","supportIf":{"treeland_window_management_v1":{"treeland":1}},"supportSum":{"treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"wayland-drm","name":"Mesa Wayland DRM","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{"wl_drm":{"mutter":1,"kwin":1,"cosmic":1,"hyprland":1,"niri":1,"weston":1,"labwc":1,"gamescope":1,"jay":1,"mir":1,"louvre":1}},"supportSum":{"mutter":"full","kwin":"full","cosmic":"full","hyprland":"full","niri":"full","weston":"full","labwc":"full","gamescope":"full","jay":"full","mir":"full","louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"agl-shell","name":"AGL shell","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"agl-shell-desktop","name":"AGL shell desktop","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"agl-screenshooter","name":"AGL screenshooter","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"aura-output-management","name":"Chromium aura output management","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"aura-shell","name":"Chromium aura shell","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"chrome-color-management","name":"Chromium color management","desc":"color management protocol","descFull":"This protocol specifies a way for a client to set the color space and\nHDR metadata of a surface and to get information about the color spaces\nand HDR capabilities of outputs.\n\nThis protocol is based on a proposed upstream protocol, which we will migrate\nto once it is approved. It may diverge from the proposed upstream protocol\nover the course of our development.","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"overlay-prioritizer","name":"Chromium overlay prioritizer","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"surface-augmenter","name":"Chromium surface augmenter","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"virtual-keyboard-unstable-v1","name":"Virtual keyboard","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{"zwp_virtual_keyboard_manager_v1":{"sway":1,"cosmic":1,"hyprland":1,"niri":1,"labwc":1,"cage":1,"wayfire":1,"jay":1,"mir":1,"treeland":1}},"supportSum":{"sway":"full","cosmic":"full","hyprland":"full","niri":"full","labwc":"full","cage":"full","wayfire":"full","jay":"full","mir":"full","treeland":"full"},"defaultExpand":false,"deprecations":null},{"id":"tizen-extension","name":"Tizen extension","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"nvidia-eglstream","name":"NVIDIA EGLStream","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{"wl_eglstream_display":{"louvre":1}},"supportSum":{"louvre":"full"},"defaultExpand":false,"deprecations":null},{"id":"nvidia-eglstream-controller","name":"NVIDIA EGLStream controller","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{},"supportSum":{},"defaultExpand":false,"deprecations":null},{"id":"gtk-shell","name":"GTK Shell","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{"gtk_shell1":{"mutter":1,"wayfire":1}},"supportSum":{"mutter":"full","wayfire":"full"},"defaultExpand":false,"deprecations":null},{"id":"mir-shell-unstable-v1","name":"Mir Shell","tags":{"source":"external","stability":"unstable"},"source":"external","supportIf":{"mir_shell_v1":{"mir":1}},"supportSum":{"mir":"full"},"defaultExpand":false,"deprecations":null}]}